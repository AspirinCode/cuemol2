// -*-Mode: C++;-*-
//
// $Id: MolSurfRenderer.qif,v 1.6 2011/04/02 07:57:34 rishitani Exp $
//

#ifndef MOLSURF_RENDERER_QIF_INCLUDED
#define MOLSURF_RENDERER_QIF_INCLUDED

#include <qsys/Renderer.qif>
#include <gfx/Color.qif>
#include <qsys/MultiGradient.qif>
#include <modules/molstr/ColoringScheme.qif>
#include <modules/molstr/SelCommand.qif>

runtime_class MolSurfRenderer extends Renderer
{
  client_hdr "MolSurfRenderer.hpp";
  client_name surface::MolSurfRenderer;

  scriptable;
  smartptr;
  cloneable;

  property object<AbstractColor$> defaultcolor => redirect(getDefaultColor, setDefaultColor);
  default defaultcolor = gfx::SolidColor::createRGB(192.0/255.0, 192.0/255.0, 1.0, 1.0);

  property boolean cullface => redirect(isCullFace, setCullFace);
  default cullface = false;

  // property boolean wireframe => redirect(isWireFrame, setWireFrame);
  // default wireframe = false;
  // property boolean dot => redirect(isDotSurf, setDotSurf);
  // default dot = false;

  /// Mesh drawing mode
  enumdef drawmode {
    fill = surface::MolSurfRenderer::SFDRAW_FILL;
    line = surface::MolSurfRenderer::SFDRAW_LINE;
    point = surface::MolSurfRenderer::SFDRAW_POINT;
  }
  property enum drawmode => redirect(getDrawMode, setDrawMode);
  default drawmode = "fill";

  /// coloring mode
  enumdef colormode {
    solid = surface::MolSurfRenderer::SFREND_SIMPLE;
    potential = surface::MolSurfRenderer::SFREND_SCAPOT;
    molecule = surface::MolSurfRenderer::SFREND_MOLFANC;
    multigrad = surface::MolSurfRenderer::SFREND_MULTIGRAD;
  }
  property enum colormode => redirect(getColorMode, setColorMode);
  default colormode = "solid";

  /// reference molecule target (used in molecule mode)
  property string target => redirect(getTgtObjName, setTgtObjName);
  default target = "";

  /// Line/Dot size in wireframe/dot mode
  property real width => redirect(getLineWidth, setLineWidth);
  default width = 1.2;

  //////////
  // for "potential" mode

  /// reference elepot target (used in potential/multigrad mode)
  property string elepot => redirect(getTgtElePotName, setTgtElePotName);
  default elepot = "";

  property real lowpar => redirect(getLowPar, setLowPar);
  default lowpar = -10.0;

  property real midpar => redirect(getMidPar, setMidPar);
  default midpar = 0.0;

  property real highpar => redirect(getHighPar, setHighPar);
  default highpar = 10.0;

  property object<AbstractColor$> highcol => redirect(getHighCol, setHighCol);
  default highcol = gfx::SolidColor::createRGB(0.0, 0.0, 1.0);

  property object<AbstractColor$> midcol => redirect(getMidCol, setMidCol);
  default midcol = gfx::SolidColor::createRGB(1.0, 1.0, 1.0);

  property object<AbstractColor$> lowcol => redirect(getLowCol, setLowCol);
  default lowcol = gfx::SolidColor::createRGB(1.0, 0.0, 0.0);

  //////////
  // for "multigrad" mode

  property object<MultiGradient$> multi_grad => redirect(getMultiGrad, xxx) (readonly);

  /// Coloring map (density/elepot) name property. The same as elepot property.
  property string color_mapname => redirect(getColorMapName, setColorMapName);

  /// Get coloring map (map/elepot) name. The same as elepot property.
  object<Object$> getColorMapObj();

  //////////
  // ramp_above/ramp_value props are used in both potential & multigrad modes

  property boolean ramp_above => redirect(isRampAbove, setRampAbove);
  default ramp_above = false;

  property real ramp_value => redirect(getRampValue, setRampValue);
  default ramp_value = 1.4;

  //////////
  // for "molecule" mode

  property object<ColoringScheme$> coloring => redirect(getColSchm, setColSchm);
  default coloring = molstr::ColoringScheme::createDefaultS();
  
  using SelCommand;

  // Selection for atom mapping
  property object<MolSelection$> sel => redirect(getMolSel, setMolSel);
  default sel = molstr::SelectionPtr(new molstr::SelCommand());

  // Selection for display
  property object<MolSelection$> showsel => redirect(getShowSel, setShowSel);
  default showsel = molstr::SelectionPtr(new molstr::SelCommand());
};

#endif

