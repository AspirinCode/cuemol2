#!/usr/bin/perl

my $arch = "@OSXDISTR_ARCH@";
my $inst_top = $ARGV[0];
my $xul_frm_dir = $ARGV[1];

my $top_srcdir = "@top_srcdir@";
my $boost_dir = "@BOOST_LDFLAGS@";
my $cgal_dir = "@CGAL_LDFLAGS@";
my $glew_dir = "@GLEW_LDFLAGS@";
my $lcms_dir = "@LCMS_LDFLAGS@";
my $xz_dir = "@XZ_LDFLAGS@";
my $xmlrpc_dir = "@XMLRPC_LDFLAGS@";
my $use_boost_timer = "@USE_BOOST_TIMER@";

my $ICON = "$top_srcdir/osxbuild/cuemol-disk1.icns";

##########

if (!-d $inst_top) {
    die "inst_top ($inst_top) not found.\nUsage: $0 <inst_top> <top_srcdir> [boost_dir]\n";
}
if (!-d $top_srcdir) {
    die "top_srcdir ($top_srcdir) not found.\nUsage: $0 <inst_top> <top_srcdir> [boost_dir]\n";
}

$boost_dir =~ s/^-L//;
if (!-d $boost_dir) {
    print "$boost_dir not found, use /usr/local instead ...\n";
    $boost_dir = "/usr/local/lib"
}
else {
    print "boost_dir $boost_dir\n";
}

$cgal_dir =~ s/^-L//;
if (!-d $cgal_dir) {
    die "CGAL $cgal_dir not found.\n";
}
else {
    print "cgal_dir $cgal_dir OK\n";
}

$glew_dir =~ s/^-L//;
if (!-d $glew_dir) {
    die "GLEW $glew_dir not found.\n";
}
else {
    print "glew_dir $glew_dir OK\n";
}

$lcms_dir =~ s/^-L//;
if (!-d $lcms_dir) {
    die "LCMS $lcms_dir not found.\n";
}
else {
    print "lcms_dir $lcms_dir OK\n";
}

$xz_dir =~ s/^-L//;
if (!-d $xz_dir) {
    die "XZ $xz_dir not found.\n";
}
else {
    print "xz_dir $xz_dir OK\n";
}

my $has_xmlrpc=0;
if ($xmlrpc_dir) {
    $xmlrpc_dir =~ s/^-L//;
    if (!-d $xmlrpc_dir) {
	die "XMLRPC $xmlrpc_dir not found.\n";
    }
    else {
	print "xmlprc_dir $xmlrpc_dir OK\n";
	$has_xmlrpc=1;	
    }
}


##########

# Dylib list to be copyed to lib directory
my @copylib = ("$boost_dir/libboost_thread*.dylib",
	       "$boost_dir/libboost_system*.dylib",
	       "$boost_dir/libboost_filesystem*.dylib",
	       "$boost_dir/libboost_iostreams*.dylib",
	       "$boost_dir/libboost_date_time*.dylib",
	       "$boost_dir/libboost_chrono*.dylib",
	       "$cgal_dir/libCGAL.*.dylib",
	       "$glew_dir/libGLEW.2.0.0.dylib",
	       "$lcms_dir/liblcms2.2.dylib",
	       "$xz_dir/liblzma.5.dylib"
);

# Dylib name list to be rewritten in the install names in dylib
my @lib_list = ("libqmpng", "libqmzlib",
		"libqlib", "libqsys", "libgfx", "libjsbr", "libsysdep", 
		"libmolstr", "libmolvis", "libsymm", "libsurface", "libxtal", "libmdtools",
		"libmolanl", "liblwview", "libanim", "librender", "libimporters",
		"libboost_thread", "libboost_system", "libboost_filesystem", "libboost_iostreams", "libboost_date_time",
		"libboost_chrono",
		"libCGAL", "libGLEW", "liblcms2", "liblzma");

if ($use_boost_timer eq "yes") {
    push(@copylib, ("$boost_dir/libboost_timer*.dylib"));
    push(@lib_list, ("libboost_timer"));
}

if ($has_xmlrpc) {
    push(@lib_list, ("libxmlrpc_server_abyss++",
		     "libxmlrpc_server++",
		     "libxmlrpc_server_abyss",
		     "libxmlrpc_server",
		     "libxmlrpc_abyss",
		     "libxmlrpc++",
		     "libxmlrpc",
		     "libxmlrpc_util",
		     "libxmlrpc_util++",
		     "libxmlrpc_xmlparse",
		     "libxmlrpc_xmltok"));
    push(@copylib, ("$xmlrpc_dir/libxmlrpc_server_abyss++.8.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_server++.8.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_server_abyss.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_server.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_abyss.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc++.8.39.dylib",
		    "$xmlrpc_dir/libxmlrpc.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_util.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_util++.8.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_xmlparse.3.39.dylib",
		    "$xmlrpc_dir/libxmlrpc_xmltok.3.39.dylib"));

}


my $RSYNC = "rsync";

##########

my $XUL_FRAMEWORK="/Library/Frameworks/XUL.framework";
if ($xul_frm_dir) {
    $XUL_FRAMEWORK=$xul_frm_dir;
}
print "XUL.Framework dir $XUL_FRAMEWORK\n";

my $dist_top; 
open(IN, "$top_srcdir/version.hpp") || die "$?:$!";
while (<IN>) {
    if (/PRODUCTVER\s+(\d+),(\d+),(\d+),(\d+)/) {
	$dist_top = "CueMol2-$1.$2.$3.$4-$arch"; 
    }
}
close(IN);

print "output: $dist_top\n";

#####

if (1) {
if (-d $dist_top) {
    system("rm -rf $dist_top");
}

system("$RSYNC -v -a --copy-unsafe-links ".
       "--cvs-exclude ".
       "--exclude Frameworks ".
       "--exclude run_win.bat ".
       "--exclude chrome/content/ ".
       "--exclude chrome/locale/ ".
       "--exclude defaults/preferences/debug-prefs.js ".
       "--exclude jarmaker/ ".
       "--exclude \"Makefile*\" ".
       "--exclude \"*.la\" ".
       "--exclude __pycache__ ".
       "$inst_top $dist_top");

system("$RSYNC -v -a --copy-unsafe-links ".
       "--exclude 1.9.2.12 ".
       "$XUL_FRAMEWORK $dist_top/CueMol2.app/Contents/Frameworks/");
if ($?) {
    print("result=<$?>\n");
    die "rsync failed.";
}
#exit;
}

#####

foreach my $libf (@copylib) {
    my $cmd = "install $libf $dist_top/CueMol2.app/Contents/Resources/lib/";
    print("$cmd\n");
    system($cmd);
    if ($?) {
	print("result=<$?>\n");
	die "install failed.";
    }
}

#####

#open(IN, "find -L $dist_top/CueMol2.app/Contents/Resources -name \"*.dylib\" -print |") || die "$!:$?";
open(IN, "find $dist_top/CueMol2.app/Contents/Resources -perm 0755 -type f -print |") || die "$!:$?";

while (<IN>) {
    chomp;
    my $otfile = $_;
    # print ("======= $_ ======\n");
    open(IN2, "otool -L $otfile |") || die "$?:$!";
    while (<IN2>) {
	my $dylib = $otfile;
	chomp;
	unless (/(\S+)\s+\(/) {
	    next;
	}
	my $deplib_path = $1;
	unless (match_lib($deplib_path)) {
	    next;
	}
	my $deplib_fname = base_name($deplib_path);
	if ($dylib =~ /dylib$/) {
	    $deplib_fname = "\@executable_path/../Resources/lib/$deplib_fname";
	}
	else {
	    $deplib_fname = "\@executable_path/../lib/$deplib_fname";
	}
	print "Chg:$dylib $deplib_path -> $deplib_fname\n";

	change_instname($dylib, $deplib_path, $deplib_fname);

	#change_instname($dylib, $deplib_name,
	# "/Users/ishitani/proj/cuemol2/src/xul_gui/lib/$deplib_fname");
    }
}

close(IN);

my $pkgcmd = "perl $top_srcdir/osxbuild/pkg-dmg".
    " --source $dist_top --target $dist_top.dmg --icon $ICON --symlink /Applications";
print("$pkgcmd\n");
system($pkgcmd); 

sub match_lib($) {
    my $fname = shift;
    foreach my $i (@lib_list) {
	if ($fname =~ /$i/) {
	    return 1;
	}
    }

    return 0;
}

sub base_name($) {
    my $fname = shift;
    if ($fname =~ /([^\/]+)$/) {
	return $1;
    }
}

sub change_instname($$$) {
    my ($dylib, $orignm, $newnm) = @_;

    my $cmd = "install_name_tool -change $orignm $newnm $dylib";
    # print("$cmd\n");
    system($cmd);
    if ($?) {
	print("result=<$?>\n");
	die "install_name_tool failed.";
    }
}
